<<<<<<< HEAD
<?xml version = "1.0" encoding = "UTF-8" ?>
<Computer id="testNode" name="Test Node" type="empty" ip="54.225.75.13">

  <file path="bin" name="Mimikatz.exe">#PASSPORT_READER#</file>
<!--
Mimikatz.exe有2种运行模式:
1. Mimikatz -s [条目名/*] 下载这个主机中的嵌入式条目, 不写条目名或者写*或all以下载所有条目.
写条目名来指定下载某个特定的条目. 每个条目会单独存储为一个.passport文件.
*需要管理员权限才能下载条目!* 

2. Mimikatz -f [文件名] 不写文件名会分析这个主机中的嵌入式条目, 加上文件名以分析某个.passport文件.
没有管理员权限的情况下也能分析嵌入式条目,但是可用信息会更少.
-->

  <file path="bin" name="PPInjector.exe">#PASSPORT_INJECT#</file>
<!--
使用PPInjector.exe [文件名] 来执行.passport文件
-->





  <PassPort>
    <PP id="entry1" TargetComp="test1" OpenPorts="22,80" OverloadProxy="true" CrackFirewall="false" AddWhitelist="test2" LoadAction="Actions/testAction1.xml" isActive="true"></PP>
<!--<PP id="string" TargetComp="CompID" OpenPorts="NONE" OverloadProxy="bool" CrackFirewall="bool" AddWhitelist="NONE" LoadAction="NONE" isActive="bool"></PP>-->
    <PP id="entry3" TargetComp="test2" OpenPorts="21,80" OverloadProxy="false" CrackFirewall="false" LoadAction="Actions/testAction1.xml" isActive="true"></PP>
    <PP id="entry4" TargetComp="test1" OpenPorts="22,80" OverloadProxy="false" CrackFirewall="false" AddWhitelist="test2" isActive="false"></PP>
    <PP id="entry5" TargetComp="playerComp" OpenPorts="21,80" OverloadProxy="true" isActive="true"></PP>
    <PP id="entry6" TargetComp="playerComp" OpenPorts="22,80" isActive="true"></PP>
    <PP id="entry7" TargetComp="dh" LoadAction="Actions/testAction2.xml" isActive="false"></PP>
    <PP id="entry8" TargetComp="dh" isActive="false"></PP>
  </PassPort> 

<!--
<PassPort>标签我们把他看成一种"嵌入式"的令牌,好比原版游戏中的<Memory>,需要使用Mimikatz.exe分析才能发现它的存在.
每个<PP>为一个"条目",这些条目会按照给定的参数实现类似"宏命令(macros)"的效果.
比如对于entry1, 这个条目会针对id为test1的节点,打开端口22和80,过载它的代理,同时把*玩家*加入到test2白名单的list.txt里,最后执行名为testAction1的Action.
第二条展示的是这些标签支持的类型, 需要注意一台节点内嵌入式的所有条目id不能重复. 如果不想要哪个功能,可以不写这个标签,或者把生效的对象设置为"NONE". entry3到8都是一种可用的重载.
生效的最小单位是entry8, 一个有效的条目至少需要id,TargetComp和isActive标签.
"isActive"标签是条目的"开关", 允许与Action联动来设置这个条目的可用性. 默认为true.
-->

  <PassPortFile path="home/PassPort" name="passport_1.passport">
    <PP id="Entry1" TargetComp="playerComp" OpenPorts="21" OverloadProxy="true" CrackFirewall="true" AddWhitelist="test2" isActive="false"></PP>
    <PP id="Entry2" TargetComp="testNode" OpenPorts="443,1433" OverloadProxy="false" CrackFirewall="false" LoadAction="Actions/testAction2.xml" isActive="true"></PP>
  </PassPortFile>

<!--
<PassPortFile>标签是passport的文件形式,类似原版的.mem文件.
因为HN原版的限制,一台节点内只能存在一个<PassPortFile>标签.
和嵌入式条目一样,同一个.passport文件里的条目id不能重复, 但是嵌入式条目的id和文件的条目id是允许重复的.
使用PPInjector来执行它.
-->

<!--
为了防止passport文件的复制问题, 所有的passport文件执行具有同步性.
例如玩家先从节点A复制了一份passport, 然后Action对节点A上原来的passport可用性做了修改,
那么当玩家运行自己主机上旧的passport时,虽然分析时是旧的内容,但是执行时会按照节点A上最新的内容执行.
如果需要分析到最新passport的内容,需要重新去节点A下载最新的passport.
当passport的内容*可能*与分析不符时,PPInjector会出现提示:
"Synchronizing passport data..."
"Get newer passport to update details!"
-->

</Computer>



<!--
<ConditionalActions>
  <Instantly>
    <SwitchPPEntry target="testNode" path="home/PassPort" name="passport_1.passport" id="Entry1" isActive="true" />
    <SwitchPPEntry target="testNode" id="entry1" isActive="false" />
  </Instantly>
</ConditionalActions>

"SwitchPPEntry" Action可以控制某个条目的可用性.
"target"指定那个条目所处的节点id,使用"path"和"name"来确定修改的是文件的条目还是嵌入式条目.
如果修改的是嵌入式条目, 就不写"path"和"name".
"id"指定PP条目的id, "isActive"指定那个条目的可用性,为bool值.
=======
<?xml version = "1.0" encoding = "UTF-8" ?>
<Computer id="testNode" name="Test Node" type="empty" ip="54.225.75.13">

  <file path="bin" name="Mimikatz.exe">#PASSPORT_READER#</file>
<!--
Mimikatz.exe有2种运行模式:
1. Mimikatz -s [条目名/*] 下载这个主机中的嵌入式条目, 不写条目名或者写*或all以下载所有条目.
写条目名来指定下载某个特定的条目. 每个条目会单独存储为一个.passport文件.
*需要管理员权限才能下载条目!* 

2. Mimikatz -f [文件名] 不写文件名会分析这个主机中的嵌入式条目, 加上文件名以分析某个.passport文件.
没有管理员权限的情况下也能分析嵌入式条目,但是可用信息会更少.
-->

  <file path="bin" name="PPInjector.exe">#PASSPORT_INJECT#</file>
<!--
使用PPInjector.exe [文件名] 来执行.passport文件
-->





  <PassPort>
    <PP id="entry1" TargetComp="test1" OpenPorts="22,80" OverloadProxy="true" CrackFirewall="false" AddWhitelist="test2" LoadAction="Actions/testAction1.xml" isActive="true"></PP>
<!--<PP id="string" TargetComp="CompID" OpenPorts="NONE" OverloadProxy="bool" CrackFirewall="bool" AddWhitelist="NONE" LoadAction="NONE" isActive="bool"></PP>-->
    <PP id="entry3" TargetComp="test2" OpenPorts="21,80" OverloadProxy="false" CrackFirewall="false" LoadAction="Actions/testAction1.xml" isActive="true"></PP>
    <PP id="entry4" TargetComp="test1" OpenPorts="22,80" OverloadProxy="false" CrackFirewall="false" AddWhitelist="test2" isActive="false"></PP>
    <PP id="entry5" TargetComp="playerComp" OpenPorts="21,80" OverloadProxy="true" isActive="true"></PP>
    <PP id="entry6" TargetComp="playerComp" OpenPorts="22,80" isActive="true"></PP>
    <PP id="entry7" TargetComp="dh" LoadAction="Actions/testAction2.xml" isActive="false"></PP>
    <PP id="entry8" TargetComp="dh" isActive="false"></PP>
  </PassPort> 

<!--
<PassPort>标签我们把他看成一种"嵌入式"的令牌,好比原版游戏中的<Memory>,需要使用Mimikatz.exe分析才能发现它的存在.
每个<PP>为一个"条目",这些条目会按照给定的参数实现类似"宏命令(macros)"的效果.
比如对于entry1, 这个条目会针对id为test1的节点,打开端口22和80,过载它的代理,同时把*玩家*加入到test2白名单的list.txt里,最后执行名为testAction1的Action.
第二条展示的是这些标签支持的类型, 需要注意一台节点内嵌入式的所有条目id不能重复. 如果不想要哪个功能,可以不写这个标签,或者把生效的对象设置为"NONE". entry3到8都是一种可用的重载.
生效的最小单位是entry8, 一个有效的条目至少需要id,TargetComp和isActive标签.
"isActive"标签是条目的"开关", 允许与Action联动来设置这个条目的可用性. 默认为true.
-->

  <PassPortFile path="home/PassPort" name="passport_1.passport">
    <PP id="Entry1" TargetComp="playerComp" OpenPorts="21" OverloadProxy="true" CrackFirewall="true" AddWhitelist="test2" isActive="false"></PP>
    <PP id="Entry2" TargetComp="testNode" OpenPorts="443,1433" OverloadProxy="false" CrackFirewall="false" LoadAction="Actions/testAction2.xml" isActive="true"></PP>
  </PassPortFile>

<!--
<PassPortFile>标签是passport的文件形式,类似原版的.mem文件.
因为HN原版的限制,一台节点内只能存在一个<PassPortFile>标签.
和嵌入式条目一样,同一个.passport文件里的条目id不能重复, 但是嵌入式条目的id和文件的条目id是允许重复的.
使用PPInjector来执行它.
-->

<!--
为了防止passport文件的复制问题, 所有的passport文件执行具有同步性.
例如玩家先从节点A复制了一份passport, 然后Action对节点A上原来的passport可用性做了修改,
那么当玩家运行自己主机上旧的passport时,虽然分析时是旧的内容,但是执行时会按照节点A上最新的内容执行.
如果需要分析到最新passport的内容,需要重新去节点A下载最新的passport.
当passport的内容*可能*与分析不符时,PPInjector会出现提示:
"Synchronizing passport data..."
"Get newer passport to update details!"
-->

</Computer>



<!--
<ConditionalActions>
  <Instantly>
    <SwitchPPEntry target="testNode" path="home/PassPort" name="passport_1.passport" id="Entry1" isActive="true" />
    <SwitchPPEntry target="testNode" id="entry1" isActive="false" />
  </Instantly>
</ConditionalActions>

"SwitchPPEntry" Action可以控制某个条目的可用性.
"target"指定那个条目所处的节点id,使用"path"和"name"来确定修改的是文件的条目还是嵌入式条目.
如果修改的是嵌入式条目, 就不写"path"和"name".
"id"指定PP条目的id, "isActive"指定那个条目的可用性,为bool值.
>>>>>>> 260a7be7d319f79adab4434511eded96fee80e80
-->